<template>
  <div class="login-container">
    <el-form class="login-form" autoComplete="on" :model="loginForm" :rules="loginRules" ref="loginForm" label-position="left">
      <h3 class="title">微风企平台管理系统</h3>
      <el-form-item prop="username">
        <span class="svg-container svg-container_login">
          <svg-icon icon-class="user" />
        </span>
        <el-input name="username" type="text" v-model="loginForm.username" autoComplete="on" placeholder="username" />
      </el-form-item>
      <el-form-item prop="password">
        <span class="svg-container">
          <svg-icon icon-class="password" />
        </span>
        <el-input name="password" :type="pwdType" @keyup.enter.native="handleLogin" v-model="loginForm.password" autoComplete="on"
          placeholder="password">
        </el-input>
          <el-button :disabled="capBtnDisabled" class="show-pwd" type="primary" @click="showPwd">{{capBtnTitle}}</el-button>
      </el-form-item>
      <el-form-item>
        <el-button type="primary" style="width:100%;" :loading="loading" @click.native.prevent="handleLogin">
          登录
        </el-button>
      </el-form-item>
    </el-form>
  </div>
</template>

<script>
import { requestConfirmCode } from '@/api/login'

export default {
  name: 'login',
  data() {
    // 手机号
    const validateMobile = (rule, value, callback) => {
      const reg = /^(0|86|17951)?(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])[0-9]{8}$/
      if (reg.test(value)) {
        callback()
      } else {
        callback(new Error('请输入正确的手机号码!'))
      }
    }
    return {
      loginForm: {
        username: '',
        password: ''
      },
      loginRules: {
        username: [{ required: true, trigger: 'blur', validator: validateMobile }],
        password: [{ required: true, message: '请输入验证码', trigger: 'blur' }]
      },
      loading: false,
      pwdType: 'password',
      capBtnTitle: '获取验证码',
      interval: {}, // 倒计时计时器
      clickBtn: false, // 倒计时中
      currentCap: false, // 正确验证码
      time: 60 // 验证码倒计时时间
    }
  },
  computed: {
    capBtnDisabled() {
      return this.loginForm.username.length < 11 || this.currentCap || this.clickBtn
    }
  },
  mounted() {},
  methods: {
    // 请求验证码
    requestConfirmCode() {
      requestConfirmCode({
        mobile: this.loginForm.username
      }).then(res => {
        if (res.data.result === '01') {
          this.$message({
            showClose: true,
            message: '验证码已发送，请注意查收！',
            type: 'success'
          })
          const that = this
          this.interval = setInterval(() => {
            if (that.time === 0) {
              clearInterval(this.interval)
              this.capBtnTitle = '获取验证码'
              this.time = 60
              this.clickBtn = false
            } else {
              this.time = that.time - 1
              this.capBtnTitle = `剩余${that.time}s`
              this.clickBtn = true
            }
          }, 1000)
        } else {
          this.$message({
            showClose: true,
            message: res.data.msg,
            type: 'error'
          })
        }
      })
    },
    // 点击获取验证码
    showPwd() {
      this.clickBtn = true // 点击中
      this.requestConfirmCode()
    },
    // 登录
    handleLogin() {
      this.$refs.loginForm.validate(valid => {
        if (valid) {
          this.loading = true
          this.$store.dispatch('Login', this.loginForm).then(res => {
            this.currentCap = true // 正确验证码
            this.$message({
              showClose: true,
              message: res,
              type: 'success'
            })
            this.loading = false
            this.$router.push({ path: '/' })
          }).catch(err => {
            this.currentCap = false // 未获取到验证码
            clearInterval(this.interval)
            this.capBtnTitle = '获取验证码'
            this.time = 5
            this.clickBtn = false
            this.$message({
              showClose: true,
              message: err,
              type: 'error'
            })
            this.loading = false
          })
        } else {
          console.log('error submit!!')
          return false
        }
      })
    }
  }
}
</script>

<style rel="stylesheet/scss" lang="scss">
$bg:#2d3a4b;
$light_gray:#eee;

/* reset element-ui css */
.login-container {
  .el-input {
    display: inline-block;
    height: 47px;
    width: 85%;
    input {
      background: transparent;
      border: 0;
      -webkit-appearance: none;
      border-radius: 0;
      padding: 12px 5px 12px 15px;
      color: $light_gray;
      height: 47px;
      &:-webkit-autofill {
        -webkit-box-shadow: 0 0 0 1000px $bg inset !important;
        -webkit-text-fill-color: #fff !important;
      }
    }
  }
  .el-form-item {
    border: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    color: #454545;
  }
}

</style>

<style rel="stylesheet/scss" lang="scss" scoped>
$bg:#2d3a4b;
$dark_gray:#889aa4;
$light_gray:#eee;
.login-container {
  position: fixed;
  height: 100%;
  width: 100%;
  background-color: $bg;

  .login-form {
    position: absolute;
    left: 0;
    right: 0;
    width: 520px;
    padding: 35px 35px 15px 35px;
    margin: 120px auto;
  }
  .tips {
    font-size: 14px;
    color: #fff;
    margin-bottom: 10px;
    span {
      &:first-of-type {
        margin-right: 16px;
      }
    }
  }
  .svg-container {
    padding: 6px 5px 6px 15px;
    color: $dark_gray;
    vertical-align: middle;
    width: 30px;
    display: inline-block;
    &_login {
      font-size: 20px;
    }
  }
  .title {
    font-size: 26px;
    color: $light_gray;
    margin: 0 auto 40px auto;
    text-align: center;
    font-weight: bold;
  }
  .show-pwd {
    position: absolute;
    right: 10px;
    top: 7px;
    font-size: 16px;
    color: white;
    cursor: pointer;
    user-select: none;
  }
}
</style>
