一、绘制文本

fillText(text, x, y [, maxWidth])
在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的.
strokeText(text, x, y [, maxWidth])
在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的.

二、有样式的文本

1、font = value
	当前我们用来绘制文本的样式. 这个字符串使用和 CSS font 属性相同的语法. 默认的字体是 10px sans-serif。
2、textAlign = value
	文本对齐选项. 可选的值包括：start, end, left, right or center. 默认值是 start。
3、textBaseline = value
	基线对齐选项. 可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。默认值是 alphabetic。
4、direction = value
	文本方向。可能的值包括：ltr, rtl, inherit。默认值是 inherit。

三、预测量文本宽度

1、measureText()
	将返回一个 TextMetrics对象的宽度、所在像素，这些体现文本特性的属性
例子：
function draw() {
  var ctx = document.getElementById('canvas').getContext('2d');
  var text = ctx.measureText("foo"); // TextMetrics object
  text.width; // 16;
}


四、使用图像 Using images

引入图像到canvas里需要以下两步基本操作：

1、获得一个指向HTMLImageElement的对象或者另一个canvas元素的引用作为源，也可以通过提供一个URL的方式来使用图片（参见例子）
2、使用drawImage()函数将图片绘制到画布上

CanvasImageSource：
	
   1、HTMLImageElement	这些图片是由Image()函数构造出来的，或者任何的<img>元素
   2、HTMLVideoElement	用一个HTML的 <video>元素作为你的图片源，可以从视频中抓取当前帧作为一个图像
   3、HTMLCanvasElement	可以使用另一个 <canvas> 元素作为你的图片源。
   4、ImageBitmap		这是一个高性能的位图，可以低延迟地绘制，它可以从上述的所有源以及其它几种源中生成。

3、绘制图片
drawImage(image, x, y)     
其中 image 是 image 或者 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标。

var img = new Image();   // 创建img元素
img.onload = function(){
  // 执行drawImage语句
}
img.src = 'myImage.png'; // 设置图片源地址

4.缩放 Scaling
drawImage(image, x, y, width, height)
这个方法多了2个参数：width 和 height，这两个参数用来控制 当向canvas画入时应该缩放的大小

5、切片 Slicing
drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)
第一个参数和其它的是相同的，都是一个图像或者另一个 canvas 的引用。其它8个参数最好是参照右边的图解，前4个是定义图像源的切片位置和大小，后4个则是定义切片的目标显示位置和大小。